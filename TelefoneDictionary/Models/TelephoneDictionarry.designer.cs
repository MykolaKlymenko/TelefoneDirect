#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TelefoneDictionary.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TelefonDirection")]
	public partial class TelephoneDictionarryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUniversalGroup(UniversalGroup instance);
    partial void UpdateUniversalGroup(UniversalGroup instance);
    partial void DeleteUniversalGroup(UniversalGroup instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    partial void Insertinfo(info instance);
    partial void Updateinfo(info instance);
    partial void Deleteinfo(info instance);
    #endregion
		
		public TelephoneDictionarryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Connection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TelephoneDictionarryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TelephoneDictionarryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TelephoneDictionarryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TelephoneDictionarryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GroupRecord> GroupRecords
		{
			get
			{
				return this.GetTable<GroupRecord>();
			}
		}
		
		public System.Data.Linq.Table<UniversalGroup> UniversalGroups
		{
			get
			{
				return this.GetTable<UniversalGroup>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		public System.Data.Linq.Table<info> infos
		{
			get
			{
				return this.GetTable<info>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupRecord")]
	public partial class GroupRecord
	{
		
		private System.Nullable<int> _RecordFK;
		
		private System.Nullable<int> _GroupPK;
		
		public GroupRecord()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFK", DbType="Int")]
		public System.Nullable<int> RecordFK
		{
			get
			{
				return this._RecordFK;
			}
			set
			{
				if ((this._RecordFK != value))
				{
					this._RecordFK = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupPK", DbType="Int")]
		public System.Nullable<int> GroupPK
		{
			get
			{
				return this._GroupPK;
			}
			set
			{
				if ((this._GroupPK != value))
				{
					this._GroupPK = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UniversalGroup")]
	public partial class UniversalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _groupPk;
		
		private string _name;
		
		private System.Nullable<int> _parentPk;
		
		private System.Nullable<int> _LeaderFK;
		
		private EntityRef<Record> _Record;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupPkChanging(int value);
    partial void OngroupPkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentPkChanging(System.Nullable<int> value);
    partial void OnparentPkChanged();
    partial void OnLeaderFKChanging(System.Nullable<int> value);
    partial void OnLeaderFKChanged();
    #endregion
		
		public UniversalGroup()
		{
			this._Record = default(EntityRef<Record>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupPk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int groupPk
		{
			get
			{
				return this._groupPk;
			}
			set
			{
				if ((this._groupPk != value))
				{
					this.OngroupPkChanging(value);
					this.SendPropertyChanging();
					this._groupPk = value;
					this.SendPropertyChanged("groupPk");
					this.OngroupPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentPk", DbType="Int")]
		public System.Nullable<int> parentPk
		{
			get
			{
				return this._parentPk;
			}
			set
			{
				if ((this._parentPk != value))
				{
					this.OnparentPkChanging(value);
					this.SendPropertyChanging();
					this._parentPk = value;
					this.SendPropertyChanged("parentPk");
					this.OnparentPkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderFK", DbType="Int")]
		public System.Nullable<int> LeaderFK
		{
			get
			{
				return this._LeaderFK;
			}
			set
			{
				if ((this._LeaderFK != value))
				{
					if (this._Record.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeaderFKChanging(value);
					this.SendPropertyChanging();
					this._LeaderFK = value;
					this.SendPropertyChanged("LeaderFK");
					this.OnLeaderFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Record_UniversalGroup", Storage="_Record", ThisKey="LeaderFK", OtherKey="RecordPK", IsForeignKey=true)]
		public Record Record
		{
			get
			{
				return this._Record.Entity;
			}
			set
			{
				Record previousValue = this._Record.Entity;
				if (((previousValue != value) 
							|| (this._Record.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Record.Entity = null;
						previousValue.UniversalGroups.Remove(this);
					}
					this._Record.Entity = value;
					if ((value != null))
					{
						value.UniversalGroups.Add(this);
						this._LeaderFK = value.RecordPK;
					}
					else
					{
						this._LeaderFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Record");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordPK;
		
		private string _Name;
		
		private string _Position;
		
		private string _Photo;
		
		private EntitySet<UniversalGroup> _UniversalGroups;
		
		private EntitySet<info> _infos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordPKChanging(int value);
    partial void OnRecordPKChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public Record()
		{
			this._UniversalGroups = new EntitySet<UniversalGroup>(new Action<UniversalGroup>(this.attach_UniversalGroups), new Action<UniversalGroup>(this.detach_UniversalGroups));
			this._infos = new EntitySet<info>(new Action<info>(this.attach_infos), new Action<info>(this.detach_infos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordPK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordPK
		{
			get
			{
				return this._RecordPK;
			}
			set
			{
				if ((this._RecordPK != value))
				{
					this.OnRecordPKChanging(value);
					this.SendPropertyChanging();
					this._RecordPK = value;
					this.SendPropertyChanged("RecordPK");
					this.OnRecordPKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(240)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(240)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Record_UniversalGroup", Storage="_UniversalGroups", ThisKey="RecordPK", OtherKey="LeaderFK")]
		public EntitySet<UniversalGroup> UniversalGroups
		{
			get
			{
				return this._UniversalGroups;
			}
			set
			{
				this._UniversalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Record_info", Storage="_infos", ThisKey="RecordPK", OtherKey="RecordFK")]
		public EntitySet<info> infos
		{
			get
			{
				return this._infos;
			}
			set
			{
				this._infos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UniversalGroups(UniversalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Record = this;
		}
		
		private void detach_UniversalGroups(UniversalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Record = null;
		}
		
		private void attach_infos(info entity)
		{
			this.SendPropertyChanging();
			entity.Record = this;
		}
		
		private void detach_infos(info entity)
		{
			this.SendPropertyChanging();
			entity.Record = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.info")]
	public partial class info : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Phone;
		
		private string _EMail;
		
		private System.Nullable<int> _RecordFK;
		
		private int _infoPK;
		
		private EntityRef<Record> _Record;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnRecordFKChanging(System.Nullable<int> value);
    partial void OnRecordFKChanged();
    partial void OninfoPKChanging(int value);
    partial void OninfoPKChanged();
    #endregion
		
		public info()
		{
			this._Record = default(EntityRef<Record>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(100)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFK", DbType="Int")]
		public System.Nullable<int> RecordFK
		{
			get
			{
				return this._RecordFK;
			}
			set
			{
				if ((this._RecordFK != value))
				{
					if (this._Record.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordFKChanging(value);
					this.SendPropertyChanging();
					this._RecordFK = value;
					this.SendPropertyChanged("RecordFK");
					this.OnRecordFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_infoPK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int infoPK
		{
			get
			{
				return this._infoPK;
			}
			set
			{
				if ((this._infoPK != value))
				{
					this.OninfoPKChanging(value);
					this.SendPropertyChanging();
					this._infoPK = value;
					this.SendPropertyChanged("infoPK");
					this.OninfoPKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Record_info", Storage="_Record", ThisKey="RecordFK", OtherKey="RecordPK", IsForeignKey=true)]
		public Record Record
		{
			get
			{
				return this._Record.Entity;
			}
			set
			{
				Record previousValue = this._Record.Entity;
				if (((previousValue != value) 
							|| (this._Record.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Record.Entity = null;
						previousValue.infos.Remove(this);
					}
					this._Record.Entity = value;
					if ((value != null))
					{
						value.infos.Add(this);
						this._RecordFK = value.RecordPK;
					}
					else
					{
						this._RecordFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Record");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
